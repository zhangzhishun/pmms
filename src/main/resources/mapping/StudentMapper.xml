<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.mapper.StudentMapper">

    <resultMap id="BaseResultMap" type="com.springboot.entity.Student">
        <result column="stuId" jdbcType="INTEGER" property="stuId" />
        <result column="stuPassword" jdbcType="VARCHAR" property="stuPassword" />
        <result column="stuName" jdbcType="VARCHAR" property="stuName" />
        <result column="stuSex" jdbcType="VARCHAR" property="stuSex" />
        <result column="stuPhoto" jdbcType="VARCHAR" property="stuPhoto" />
        <result column="stuOriginPlace" jdbcType="VARCHAR" property="stuOriginPlace" />
        <result column="stuclassId" jdbcType="INTEGER" property="stuclassId" />
        <result column="stuContactInformation" jdbcType="VARCHAR" property="stuContactInformation" />
        <result column="stuAddress" jdbcType="VARCHAR" property="stuAddress" />
        <result column="stuPartyDues" jdbcType="INTEGER" property="stuPartyDues" />
    </resultMap>

    <!-- 根据stuId获取student对象 -->
    <select id="getStudentById" resultType="com.springboot.entity.Student">
        select * from student where stuId = #{stuId}
    </select>

    <!-- 更新student方法 -->
    <update id="updateStudent"  parameterType="com.springboot.entity.Student">
         update student SET  stuPassword=#{stuPassword},stuName=#{stuName},stuSex=#{stuSex},stuOriginPlace=#{stuOriginPlace},stuClassId=#{stuClassId},stuContactInformation=#{stuContactInformation},stuPartyDues=#{stuPartyDues}
         where stuId=#{stuId}
    </update>

    <!-- 插入student方法 -->
    <insert id="insertStudent" parameterType="com.springboot.entity.Student">
        insert into student
        values(#{stuId},#{stuPassword},#{stuName},#{stuSex},#{stuPhoto},
            #{stuOriginPlace},#{stuClassId},#{stuContactInformation},#{stuAddress},#{stuPartyDues})
    </insert>

    <!-- 根据stuId删除student方法 -->
    <delete id="delStudentByStuId" parameterType="int">
        delete from student where stuId=#{stuId}
    </delete>

    <!-- 获取指定学号的Student对象的所有申请信息 按applyId倒序 -->
    <select id="getStudentByStuId" resultType="java.util.Map">
        select *
        from (((((student a inner join stuclass b on a.stuclassId = b.stuclassId)
        inner join teacher t on b.teaId = t.teaId)
        inner join major c on b.majorId = c.majorId)
        inner join applyinfo d on a.stuId = d.stuId)
        inner join partybranch p on p.pbId = c.pbId)
        inner join level e on e.levelId = d.levelId
        where a.stuId = #{stuId} and d.applyState = 1
        order by d.applyId desc
    </select>


    <!-- 根据支部和学生身份筛选学生  pb：支部编号  level：学生身份等级 -->
    <select id="getStudentByPBAndLevel" resultType="java.util.Map">
        select * from ((((student a
        inner join stuclass s on a.stuclassId = s.stuclassId)
        inner join applyinfo b on a.stuId = b.stuId)
        inner join teacher t on s.teaId = t.teaId)
        inner join major c on s.majorId = c.majorId)
        inner join level e on e.levelId = b.levelId
        where (a.stuId,b.levelId) in
        (select a.stuId, Max(b.levelId) as Maxlevel
        from (student a inner join applyinfo b on a.stuId = b.stuId)
        group by a.stuId)
        and c.pbId = #{pb}
        and b.applyState = 1
        and b.levelId = #{level}
    </select>
</mapper>